#include <stdio.h>
#include <omp.h>

static long num_steps = 100000;
double step;
int main (){ 	
	int j;	
	double pi = 0.0, sum_total = 0.0;
	step = 1.0/(double) num_steps;
	//omp_set_num_threads(4);
	int n_threads = omp_get_num_threads();
	double sum[n_threads];
	int num_steps_by_thread = num_steps / n_threads;	
	#pragma omp parallel
	{
		int id = omp_get_thread_num();
		int i;
		double x;
		sum[id] = 0.0;
		for (i=id*num_steps_by_thread; i<id*num_steps_by_thread+num_steps_by_thread; i++){
			x = (i+0.5)*step;
			sum[id] = sum[id] + 4.0/(1.0+x*x);
		}
	}
	
	for(j = 0; j < n_threads; j++){
		sum_total = sum[j];
	}
	pi = step * sum_total;
	printf("valor do pi: %f\n", pi);

	return 0;
}
